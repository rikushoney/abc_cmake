#!/usr/bin/env python

import itertools
import sys
import subprocess
from argparse import ArgumentParser
from collections.abc import Iterable, Iterator, Sequence
from pathlib import Path
from typing import TypeVar

_T = TypeVar("_T")


_ABC_MINI_TOOLDIR: Path = Path(__file__).parent
_ABC_MINI_ROOTDIR: Path = _ABC_MINI_TOOLDIR.parent
_ABC_ROOTDIR: Path = _ABC_MINI_ROOTDIR.parent
_DEPTOOL_BANNER: str = "AUTOGENERATED BY ABC-MINI DEPTOOL... DO NOT MODIFY"
_DEPTOOL_FOOTER: str = "END AUTOGENERATED ABC-MINI DEPTOOL"


def make_comment(line: str) -> str:
    return "// " + line


def flatten(nest: Iterable[Iterable[_T]]) -> Iterator[_T]:
    yield from itertools.chain.from_iterable(nest)


def eprint(*values: object) -> None:
    print(*values, file=sys.stderr)


def iscpp(file: Path) -> bool:
    return file.suffix in (".cpp",)


def main(args: Sequence[str] | None = None) -> int:
    argparser = ArgumentParser()
    argparser.add_argument("searchdir", type=Path, default=Path("."))
    parsed, args = argparser.parse_known_args(args)
    searchdir: Path = parsed.searchdir
    for dirpath, _, filenames in searchdir.walk():
        cpp_sources = filter(iscpp, (dirpath / f for f in filenames))
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
